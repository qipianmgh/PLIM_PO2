function [methodinfo,structs,enuminfo,ThunkLibName]=C843_GCS_prototype
%C843_GCS_PROTOTYPE Create structures to define interfaces found in 'C843_GCS_DLL'.

%This function was generated by loadlibrary.m parser version  on Fri Jun  5 18:47:51 2020
%perl options:'C843_GCS_DLL.i -outfile=C843_GCS_prototype.m -thunkfile=C843_GCS_DLL_x64_thunk_pcwin64.c -header=C843_GCS_DLL.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'C843_GCS_DLL_x64_thunk_pcwin64');
% long  __stdcall C843_Connect ( long iBoardNumber ); 
fcns.thunkname{fcnNum}='longlongThunk';fcns.name{fcnNum}='C843_Connect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_IsConnected ( long iID ); 
fcns.thunkname{fcnNum}='int32longThunk';fcns.name{fcnNum}='C843_IsConnected'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_ListPCI ( char * szIDList , long maxlen ); 
fcns.thunkname{fcnNum}='int32cstringlongThunk';fcns.name{fcnNum}='C843_ListPCI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'long'};fcnNum=fcnNum+1;
% void  __stdcall C843_CloseConnection ( long iID ); 
fcns.thunkname{fcnNum}='voidlongThunk';fcns.name{fcnNum}='C843_CloseConnection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% long  __stdcall C843_GetError ( long iID ); 
fcns.thunkname{fcnNum}='longlongThunk';fcns.name{fcnNum}='C843_GetError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_SetErrorCheck ( long iID , BOOL bErrorCheck ); 
fcns.thunkname{fcnNum}='int32longint32Thunk';fcns.name{fcnNum}='C843_SetErrorCheck'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_TranslateError ( long errNr , char * szBuffer , long maxlen ); 
fcns.thunkname{fcnNum}='int32longcstringlongThunk';fcns.name{fcnNum}='C843_TranslateError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% long  __stdcall C843_GetCurrentBoardId ( long iBoardNumber ); 
fcns.thunkname{fcnNum}='longlongThunk';fcns.name{fcnNum}='C843_GetCurrentBoardId'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qHLP ( const long iID , char * buffer , long maxlen ); 
fcns.thunkname{fcnNum}='int32longcstringlongThunk';fcns.name{fcnNum}='C843_qHLP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qHPA ( const long iID , char * buffer , long maxlen ); 
fcns.thunkname{fcnNum}='int32longcstringlongThunk';fcns.name{fcnNum}='C843_qHPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qHDR ( const long iID , char * buffer , long maxlen ); 
fcns.thunkname{fcnNum}='int32longcstringlongThunk';fcns.name{fcnNum}='C843_qHDR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qERR ( long iID , long * pnError ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='C843_qERR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qIDN ( long iID , char * buffer , long maxlen ); 
fcns.thunkname{fcnNum}='int32longcstringlongThunk';fcns.name{fcnNum}='C843_qIDN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qVER ( long iID , char * buffer , long maxlen ); 
fcns.thunkname{fcnNum}='int32longcstringlongThunk';fcns.name{fcnNum}='C843_qVER'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_INI ( long iID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='C843_INI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_CLR ( long iID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='C843_CLR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_MOV ( long iID , const char * szAxes , const double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_MOV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qMOV ( long iID , const char * szAxes , double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qMOV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_MVR ( long iID , const char * szAxes , const double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_MVR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_MVE ( long iID , const char * szAxes , const double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_MVE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_IsMoving ( long iID , const char * szAxes , BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_IsMoving'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_IsUserProfileActive ( long iID , const char * szAxes , BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_IsUserProfileActive'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qONT ( long iID , const char * szAxes , BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qONT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qPOS ( long iID , const char * szAxes , double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qPOS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_POS ( long iID , const char * szAxes , const double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_POS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_DFF ( long iID , const char * szAxes , const double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_DFF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qDFF ( long iID , const char * szAxes , double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qDFF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_DFH ( long iID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='C843_DFH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qDFH ( long iID , const char * szAxes , double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qDFH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_GOH ( long iID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='C843_GOH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_HLT ( long iID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='C843_HLT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_STP ( long iID ); 
fcns.thunkname{fcnNum}='int32longThunk';fcns.name{fcnNum}='C843_STP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_SVO ( long iID , const char * szAxes , const BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_SVO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qSVO ( long iID , const char * szAxes , BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qSVO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_SMO ( long iID , const char * szAxes , const long * pnValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_SMO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qSMO ( long iID , const char * szAxes , long * pnValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qSMO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_VEL ( long iID , const char * szAxes , const double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_VEL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qVEL ( long iID , const char * szAxes , double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qVEL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_ACC ( long iID , const char * szAxes , const double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_ACC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qACC ( long iID , const char * szAxes , double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qACC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_DEC ( long iID , const char * szAxes , const double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_DEC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qDEC ( long iID , const char * szAxes , double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qDEC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qSRG ( long iID , const char * szAxes , const long * iCmdarray , long * iValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='C843_qSRG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_BRA ( long iID , const char * szAxes , const BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_BRA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qBRA ( long iID , char * szBuffer , const long maxlen ); 
fcns.thunkname{fcnNum}='int32longcstringlongThunk';fcns.name{fcnNum}='C843_qBRA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qCST ( long iID , const char * szAxes , char * names , long maxlen ); 
fcns.thunkname{fcnNum}='int32longcstringcstringlongThunk';fcns.name{fcnNum}='C843_qCST'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_CST ( long iID , const char * szAxes , const char * names ); 
fcns.thunkname{fcnNum}='int32longcstringcstringThunk';fcns.name{fcnNum}='C843_CST'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qVST ( long iID , char * buffer , long maxlen ); 
fcns.thunkname{fcnNum}='int32longcstringlongThunk';fcns.name{fcnNum}='C843_qVST'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qTVI ( long iID , char * axes , long maxlen ); 
fcns.thunkname{fcnNum}='int32longcstringlongThunk';fcns.name{fcnNum}='C843_qTVI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_SAI ( long iID , const char * szOldAxes , const char * szNewAxes ); 
fcns.thunkname{fcnNum}='int32longcstringcstringThunk';fcns.name{fcnNum}='C843_SAI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qSAI ( long iID , char * axes , long maxlen ); 
fcns.thunkname{fcnNum}='int32longcstringlongThunk';fcns.name{fcnNum}='C843_qSAI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qSAI_ALL ( long iID , char * axes , long maxlen ); 
fcns.thunkname{fcnNum}='int32longcstringlongThunk';fcns.name{fcnNum}='C843_qSAI_ALL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_SPA ( long iID , const char * szAxes , const long * iCmdarray , const double * dValarray , const char * szStageNames ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='C843_SPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'longPtr', 'doublePtr', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qSPA ( long iID , const char * szAxes , const long * iCmdarray , double * dValarray , char * szStageNames , long iMaxNameSize ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrvoidPtrcstringlongThunk';fcns.name{fcnNum}='C843_qSPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'longPtr', 'doublePtr', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_CTO ( long iID , const long * iTriggerLinesArray , const long * iParamIDArray , const char * szValues , long iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrcstringlongThunk';fcns.name{fcnNum}='C843_CTO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'longPtr', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qCTO ( long iID , const long * iTriggerLinesArray , const long * pParamIDArray , char * szBuffer , long iArraySize , long iBufferMaxlen ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrcstringlonglongThunk';fcns.name{fcnNum}='C843_qCTO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'longPtr', 'cstring', 'long', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_TRO ( long iID , const long * iTriggerLinesArray , const BOOL * pbValarray , long iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='C843_TRO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'int32Ptr', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qTRO ( long iID , const long * iTriggerLinesArray , BOOL * pbValarray , long iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='C843_qTRO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'int32Ptr', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_GetInputChannelNames ( long iID , char * szBuffer , const long maxlen ); 
fcns.thunkname{fcnNum}='int32longcstringlongThunk';fcns.name{fcnNum}='C843_GetInputChannelNames'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_GetOutputChannelNames ( long iID , char * szBuffer , const long maxlen ); 
fcns.thunkname{fcnNum}='int32longcstringlongThunk';fcns.name{fcnNum}='C843_GetOutputChannelNames'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_DIO ( long iID , const char * szChannels , const BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_DIO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qDIO ( long iID , const char * szChannels , BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qDIO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qTIO ( long iID , long * pINr , long * pONr ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='C843_qTIO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_C843Commandset ( long iID , const char * szCommand , char * szAwnser , long iMaxSize ); 
fcns.thunkname{fcnNum}='int32longcstringcstringlongThunk';fcns.name{fcnNum}='C843_C843Commandset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_GcsCommandset ( long iID , const char * szCommand ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='C843_GcsCommandset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_GcsGetAnswer ( long iID , char * szAnswer , long bufsize ); 
fcns.thunkname{fcnNum}='int32longcstringlongThunk';fcns.name{fcnNum}='C843_GcsGetAnswer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_GcsGetAnswerSize ( long iID , long * iAnswerSize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='C843_GcsGetAnswerSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_SetQMC ( long iID , unsigned _int8 bCmd , unsigned _int8 bAxis , _int32 Param ); 
fcns.thunkname{fcnNum}='int32longunsigned_int8unsigned_int8_int32Thunk';fcns.name{fcnNum}='C843_SetQMC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'uint8', 'uint8', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_GetQMC ( long iID , unsigned _int8 bCmd , unsigned _int8 bAxis , _int32 * pResult ); 
fcns.thunkname{fcnNum}='int32longunsigned_int8unsigned_int8voidPtrThunk';fcns.name{fcnNum}='C843_GetQMC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'uint8', 'uint8', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_SetQMCA ( long iID , unsigned _int8 bCmd , unsigned _int8 bAxis , unsigned _int16 Param1 , _int32 lParam2 ); 
fcns.thunkname{fcnNum}='int32longunsigned_int8unsigned_int8unsigned_int16_int32Thunk';fcns.name{fcnNum}='C843_SetQMCA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'uint8', 'uint8', 'uint16', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_GetQMCA ( long iID , unsigned _int8 bCmd , unsigned _int8 bAxis , unsigned _int16 lParam , _int32 * pResult ); 
fcns.thunkname{fcnNum}='int32longunsigned_int8unsigned_int8unsigned_int16voidPtrThunk';fcns.name{fcnNum}='C843_GetQMCA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'uint8', 'uint8', 'uint16', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_MNL ( long iID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='C843_MNL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_MPL ( long iID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='C843_MPL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_REF ( long iID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='C843_REF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_FRF ( long iID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='C843_FRF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_FPL ( long iID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='C843_FPL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_FNL ( long iID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='C843_FNL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_FED ( long iID , const char * szAxes , const long * iEdgeIDArray , const long * iParArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='C843_FED'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qFED ( long iID , const char * szAxes , long * iEdgeIDArray , long * iParArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='C843_qFED'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qFES ( long iID , const char * szAxes , BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qFES'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qREF ( long iID , const char * szAxes , BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qREF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qFRF ( long iID , const char * szAxes , BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qFRF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qLIM ( long iID , const char * szAxes , BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qLIM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_IsReferencing ( long iID , const char * szAxes , BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_IsReferencing'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_IsControllerReady ( const long ID , long * piControllerReady ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='C843_IsControllerReady'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_GetRefResult ( long iID , const char * szAxes , BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_GetRefResult'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_IsReferenceOK ( long iID , const char * szAxes , BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_IsReferenceOK'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qTMN ( long iID , const char * szAxes , double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qTMN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qTMX ( long iID , const char * szAxes , double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qTMX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_RON ( long iID , const char * szAxes , const BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_RON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qRON ( long iID , const char * szAxes , BOOL * pbValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qRON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_UPB ( long iID , const char * szClusters , const long * iCmdarray , const long * iPararray , const long * iValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='C843_UPB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'longPtr', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_UPD ( long iID , const char * szClusters , const long * iCmdarray , const long * iPararray , const double * dValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='C843_UPD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'longPtr', 'longPtr', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_UPC ( long iID , const char * szAxes , const char * szClusters , const long * iCmdarray , const long * iPararray ); 
fcns.thunkname{fcnNum}='int32longcstringcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='C843_UPC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_UPA ( long iID , const char * szClusters , const long * iCmdarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_UPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_UPR ( long iID , const char * szAxes , const char * szClusters , const long * iCmdarray ); 
fcns.thunkname{fcnNum}='int32longcstringcstringvoidPtrThunk';fcns.name{fcnNum}='C843_UPR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qUPB ( long iID , const char * szClusters , const long * iCmdarray , const long * iPararray , long * iValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='C843_qUPB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'longPtr', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qUPD ( long iID , const char * szClusters , const long * iCmdarray , const long * iPararray , double * dValarray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='C843_qUPD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'longPtr', 'longPtr', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qUPC ( long iID , char * szClusters , char * szAxes , long * iCmdarray , long * iPararray ); 
fcns.thunkname{fcnNum}='int32longcstringcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='C843_qUPC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qUPA ( long iID , const char * szClusters , const long * iCmdarray , long * iPararray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='C843_qUPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_STE ( long iID , char cAxis , double dOffset ); 
fcns.thunkname{fcnNum}='int32longint8doubleThunk';fcns.name{fcnNum}='C843_STE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int8', 'double'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qSTE ( long iID , char cAxis , long iOffset , long nrValues , double * pdValarray ); 
fcns.thunkname{fcnNum}='int32longint8longlongvoidPtrThunk';fcns.name{fcnNum}='C843_qSTE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int8', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_DRC ( long iID , const long * iRecTableId , const char * sRecSourceId , const long * iRecOption , const long * TriggerOption ); 
fcns.thunkname{fcnNum}='int32longvoidPtrcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='C843_DRC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'cstring', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qDRC ( long iID , const long * iRecTableId , char * sRecSourceId , long * iRecOption , long * TriggerOption , long iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrcstringvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='C843_qDRC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'cstring', 'longPtr', 'longPtr', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qDRL ( long iID , long * nrValues ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='C843_qDRL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_DRT ( long iID , const long * iRecTableId , const long * TriggerOption , const char * sValue , long iArrayLength ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrcstringlongThunk';fcns.name{fcnNum}='C843_DRT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'longPtr', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qDRT ( long iID , const long * iRecTableId , long * TriggerOption , char * sValue , long iArraySize , long iValueBufferLength ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrcstringlonglongThunk';fcns.name{fcnNum}='C843_qDRT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'longPtr', 'cstring', 'long', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qDRR_SYNC ( long iID , long iRecTableId , long iOffset , long nrValues , double * pdValArray ); 
fcns.thunkname{fcnNum}='int32longlonglonglongvoidPtrThunk';fcns.name{fcnNum}='C843_qDRR_SYNC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qDRR ( long iID , const long * piRecTableIds , long iNumberOfRecChannels , long iOffset , long nrValues , double ** pdValArray , char * szGcsArrayHeader , long iGcsArrayHeaderMaxSize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrlonglonglongvoidPtrcstringlongThunk';fcns.name{fcnNum}='C843_qDRR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'long', 'long', 'long', 'doublePtrPtr', 'cstring', 'long'};fcnNum=fcnNum+1;
% long  __stdcall C843_GetAsyncBufferIndex ( long iID ); 
fcns.thunkname{fcnNum}='longlongThunk';fcns.name{fcnNum}='C843_GetAsyncBufferIndex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_GetAsyncBuffer ( long iID , double ** pdValueArray ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='C843_GetAsyncBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'doublePtrPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qTNR ( long iID , long * iNrOfTables ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='C843_qTNR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_RTR ( long iID , long iRecordTableRate ); 
fcns.thunkname{fcnNum}='int32longlongThunk';fcns.name{fcnNum}='C843_RTR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qRTR ( long iID , long * iRecordTableRate ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='C843_qRTR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_AddStage ( long iID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='C843_AddStage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_RemoveStage ( long iID , const char * szStageName ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='C843_RemoveStage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_OpenUserStagesEditDialog ( long iID ); 
fcns.thunkname{fcnNum}='int32longThunk';fcns.name{fcnNum}='C843_OpenUserStagesEditDialog'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_OpenPiStagesEditDialog ( long iID ); 
fcns.thunkname{fcnNum}='int32longThunk';fcns.name{fcnNum}='C843_OpenPiStagesEditDialog'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_JON ( long iId , const long * iJoystickIDsArray , const BOOL * pbValueArray , long iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='C843_JON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'int32Ptr', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qJON ( long iID , const long * iJoystickIDsArray , BOOL * pbValueArray , long iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='C843_qJON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'int32Ptr', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qJAX ( long iId , const long * iJoystickIDsArray , const long * iAxesIDsArray , long iArraySize , char * szAxesBuffer , long iBufferSize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrlongcstringlongThunk';fcns.name{fcnNum}='C843_qJAX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'longPtr', 'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_JAX ( long iID , long iJoystickID , long iAxesID , const char * szAxesBuffer ); 
fcns.thunkname{fcnNum}='int32longlonglongcstringThunk';fcns.name{fcnNum}='C843_JAX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_SRA ( long iID , const char * szAxes , double * dValArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_SRA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qSRA ( long iID , const char * szAxes , double * dValArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qSRA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_EGE ( long iID , const char * szAxes , BOOL * bValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_EGE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qEGE ( long iID , const char * szAxes , BOOL * bValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='C843_qEGE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_MAS ( long iID , const char * szAxes , const char * szMasters ); 
fcns.thunkname{fcnNum}='int32longcstringcstringThunk';fcns.name{fcnNum}='C843_MAS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_qMAS ( long iID , const char * szAxes , char * szMasters ); 
fcns.thunkname{fcnNum}='int32longcstringcstringThunk';fcns.name{fcnNum}='C843_qMAS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_DisableSingleStagesDatFiles ( long iID , BOOL bDisable ); 
fcns.thunkname{fcnNum}='int32longint32Thunk';fcns.name{fcnNum}='C843_DisableSingleStagesDatFiles'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall C843_DisableUserStagesDatFiles ( long iID , BOOL bDisable ); 
fcns.thunkname{fcnNum}='int32longint32Thunk';fcns.name{fcnNum}='C843_DisableUserStagesDatFiles'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32'};fcnNum=fcnNum+1;
methodinfo=fcns;